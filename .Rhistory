#SUMMARY STATS TABLE
#INSERT RUN STATS
selectInput("samples",
label = "",
choices = list("Trailer 1 GAC (10-Aug-21)",
"Trailer 4 GAC - sample 1 (14-May-21)",
"Trailer 4 GAC - sample 2 (14-May-21)",
#"Trailer 2  GAC (03-May-21)",
#"Trailer 3 GAC (07-May-21)",
"GAC (XX-Feb-20)",
#"GAC (01-Jan-20)")
"ALL"
)
),
reactableOutput("table"),
selectInput("samples",
label = "",
choices = list('Accumulibacter sp005524045 (Feb)',
'Accumulibacter sp005524045 (T4)',
'Bacteriovoracales (T4)',
'CG2-30-37-29 (T4)',
'DRLM01 (T1)',
'DRLM01 (T4)',
'DRLM01(Feb)',
'Fen-1342 (T1)',
'Fen-1342 (T4)',
'Ga0077554 (T1)',
'Ga0077554(Feb)',
'Ga0077554(Feb)',
'Micavibrionales (T1)',
'Micavibrionales_A (T4)',
'OLB17 (T1)',
'OLB17(Feb)',
'RAS1 (T1)',
'RBC074 (T1)',
'SXVE01 (T1)',
'SZUA-149 (T1)',
'UBA2112 (T4)',
'UBA2386 (Feb)',
'UBA7966 (Feb)',
'UBA9160 (Feb)',
'UBA9628(Feb)'
),
selected = 'Accumulibacter sp005524045 (T4)'
),
uiOutput("circos")
),
#Right column
column(4,style = "background-color:#FFFFFF;",
p("text")
))
)
)
)
# Define server logic ----
server <- function(input, output) {
output$table <- renderReactable({
#REACTABLE SAMPLE SELECT
data <- switch(input$samples,
"Trailer 1 GAC (10-Aug-21)" = T1II_summstats_jan21,
"Trailer 4 GAC - sample 1 (14-May-21)" = T4II_summstats_jan21,
"GAC (XX-Feb-20)" = feb_summstats_jan21,
"ALL" = ALL
)
reactable(data[,1:8],
height = 300,
compact = TRUE,
outlined = TRUE,
highlight = TRUE,
pagination = TRUE,
style = list(fontFamily = "Work Sans, sans-serif", fontSize = "14px"),
defaultColDef = colDef(align = "center", format = colFormat(digits = 2)),
columns = list(
Size = colDef(name = "Size (bp)",
format = colFormat(digits = 0)),
Classification = colDef(align = "left", minWidth = 120, cell = function(value, index) {
species <- data$Class2[index]
div(
div(style = list(fontWeight = 600), value),
div(style = list(fontSize = 10), species))}
),
Contamination = colDef(minWidth = 120,
name = "R(%)",
cell = data_bars(
data, round_edges = TRUE,
force_outside = c(0,3),
max_value = 10,
fill_color = "#f1c40f",
text_position = "outside-base")
),
Coverage = colDef(style = function(value) {
normal <- (value - min(data$Coverage)) / (max(data$Coverage) - min(data$Coverage))
color <- colorscale(normal)
list(background = color)
}
),
GC = colDef(name = "GC (%)"),
Completeness = colDef(minWidth = 120,
name = "C(%)",
cell = data_bars(data,
round_edges = TRUE,
max_value = 100,
fill_color = c("#1abc9c"),
text_position = "outside-base")),
rRNA_genes = colDef(name = "rRNA genes", minWidth = 80, format = colFormat(digits = 0)),
tRNA_genes = colDef(name = "tRNA genes", minWidth = 80, format = colFormat(digits = 0)),
species = colDef(show = FALSE)
)
)
})
output$circos <- renderUI({
if(input$samples == "Accumulibacter sp005524045 (T4)"){
img(width = 100%, src = 'Accumulibacter sp005524045 (T4).png')
library(shiny)
library(reactable)
library(reactablefmtr)
library(readxl)
library(dplyr)
library(htmltools)
library(tidyverse)
library(readxl)
T1II_summstats_jan21 <- read_excel("C:/Users/hh_sa/Documents/poster/data/T1II_summstats_jan21.xlsx",
col_types = c("text", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "text"))
library(readxl)
T4II_summstats_jan21 <- read_excel("C:/Users/hh_sa/Documents/poster/data/T4I_summstats_jan21.xlsx",
col_types = c("text", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "text"))
library(readxl)
feb_summstats_jan21 <- read_excel("C:/Users/hh_sa/Documents/poster/data/feb_summstats_jan21.xlsx",
col_types = c("text", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "text"))
library(readxl)
ALL <- read_excel("C:/Users/hh_sa/Documents/poster/data/ALL.xlsx",
col_types = c("text", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "text"))
colorscale <- function(x) rgb(colorRamp(c("#d5e5e7", "#86cbff", "#50aef5"))(x), maxColorValue = 255)
# Define UI ----
ui <- fluidPage(
fluidRow(
column(12, style = "background-color:#FFFFFF;",
h2(strong("Metagenomic analysis of bacterial communities from an oil refinery wastewater treatment plant"), align = "center", style = "color:#2971FF"),
h4("Henry Say | Gloor Lab", align = "center"),
p("Department of Biochemistry, Western University, London, Canada", align = "center", style = "color:#B0B0B0"),
fluidRow(
#Left column
column(4,style = "background-color:#FFFFFF;",
h3(strong("Introduction")),
p("The process of refining crude oil produces large amounts of wastewater containing toxic compounds including heavy metals, various hydrocarbons and aliphatic carboxylic compounds such as naphthenic acids.
Given the grand scale of the oil production industry, wastewater is being accumulated at increasing rates and must be treated in order to limit its environmental impact. Purification of this wastewater is
done at various treatment facilities, and typically involves multiple steps that involve physical separation of solids, and even bioremediation by resident bacterial communities found in all stages of purification downstream of primary treatment."),
#WASTEWATER FACILITY DIAGRAM
img(src = "suncor_sarnia_schematicalt.png", width = "100%", align = "center"),
p("Bacterial communities have been observed to influence the success of the purification process and are correlated to times of facility failure. However, they are almost completely uncharacterized. Characterizing the metagenome of bacterial communities throughout the wastewater treatment facility could provide insight into
the relationship between bacterial constituents and capacity to remove certain toxic compounds at various stages. Furthermore, time series sampling could reveal how changes in the facility's microbiome are related to the functionality of the purification plant at each stage. Finally, meta-transcriptome sequencing could reveal genes that are activated at various treatment stages"),
h3(strong("Methods")),
p("Samples collected from Suncor's "),
#ASSEMBLY LONG READS DIAGRAM
img(src = "methods.png", width = "90%", align = "center")
),
#Center column
column(4,style = "background-color:#FFFFFF;",
h3(strong("Results")),
#SUMMARY STATS TABLE
#INSERT RUN STATS
selectInput("samples",
label = "",
choices = list("Trailer 1 GAC (10-Aug-21)",
"Trailer 4 GAC - sample 1 (14-May-21)",
"Trailer 4 GAC - sample 2 (14-May-21)",
#"Trailer 2  GAC (03-May-21)",
#"Trailer 3 GAC (07-May-21)",
"GAC (XX-Feb-20)",
#"GAC (01-Jan-20)")
"ALL"
)
),
reactableOutput("table"),
selectInput("samples",
label = "",
choices = list('Accumulibacter sp005524045 (Feb)',
'Accumulibacter sp005524045 (T4)',
'Bacteriovoracales (T4)',
'CG2-30-37-29 (T4)',
'DRLM01 (T1)',
'DRLM01 (T4)',
'DRLM01(Feb)',
'Fen-1342 (T1)',
'Fen-1342 (T4)',
'Ga0077554 (T1)',
'Ga0077554(Feb)',
'Ga0077554(Feb)',
'Micavibrionales (T1)',
'Micavibrionales_A (T4)',
'OLB17 (T1)',
'OLB17(Feb)',
'RAS1 (T1)',
'RBC074 (T1)',
'SXVE01 (T1)',
'SZUA-149 (T1)',
'UBA2112 (T4)',
'UBA2386 (Feb)',
'UBA7966 (Feb)',
'UBA9160 (Feb)',
'UBA9628(Feb)'
),
selected = 'Accumulibacter sp005524045 (T4)'
),
uiOutput("circos")
),
#Right column
column(4,style = "background-color:#FFFFFF;",
p("text")
))
)
)
)
# Define server logic ----
server <- function(input, output) {
output$table <- renderReactable({
#REACTABLE SAMPLE SELECT
data <- switch(input$samples,
"Trailer 1 GAC (10-Aug-21)" = T1II_summstats_jan21,
"Trailer 4 GAC - sample 1 (14-May-21)" = T4II_summstats_jan21,
"GAC (XX-Feb-20)" = feb_summstats_jan21,
"ALL" = ALL
)
reactable(data[,1:8],
height = 300,
compact = TRUE,
outlined = TRUE,
highlight = TRUE,
pagination = TRUE,
style = list(fontFamily = "Work Sans, sans-serif", fontSize = "14px"),
defaultColDef = colDef(align = "center", format = colFormat(digits = 2)),
columns = list(
Size = colDef(name = "Size (bp)",
format = colFormat(digits = 0)),
Classification = colDef(align = "left", minWidth = 120, cell = function(value, index) {
species <- data$Class2[index]
div(
div(style = list(fontWeight = 600), value),
div(style = list(fontSize = 10), species))}
),
Contamination = colDef(minWidth = 120,
name = "R(%)",
cell = data_bars(
data, round_edges = TRUE,
force_outside = c(0,3),
max_value = 10,
fill_color = "#f1c40f",
text_position = "outside-base")
),
Coverage = colDef(style = function(value) {
normal <- (value - min(data$Coverage)) / (max(data$Coverage) - min(data$Coverage))
color <- colorscale(normal)
list(background = color)
}
),
GC = colDef(name = "GC (%)"),
Completeness = colDef(minWidth = 120,
name = "C(%)",
cell = data_bars(data,
round_edges = TRUE,
max_value = 100,
fill_color = c("#1abc9c"),
text_position = "outside-base")),
rRNA_genes = colDef(name = "rRNA genes", minWidth = 80, format = colFormat(digits = 0)),
tRNA_genes = colDef(name = "tRNA genes", minWidth = 80, format = colFormat(digits = 0)),
species = colDef(show = FALSE)
)
)
})
output$circos <- renderUI({
if(input$samples == "Accumulibacter sp005524045 (T4)"){
img(width = 200, src = 'Accumulibacter sp005524045 (T4).png')
}
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(circlize)
sample <- "Trailer 4 (I)"
#you need to initialize with cytoband (contains contig names and their lengths). MAKE SURE THE NAMES IN COLUMN 1 OF THE CYTOBAND FILE MATCH WITH COLUMN1 NAMES IN THE BED, OR YOU WILL GET A BLANK PLOT.
cytoband <- read.table(paste0("~/poster/data/T4IIcytobands.txt"), colClasses=c("character", "numeric", "numeric", "character", "character"))
contig <- cytoband[1,1]
length <- cytoband[1,3]
#nanopore coverage
contig.pol <- read.table(paste0("~/poster/data/polished_cov/T4I/182/182.regions.bed"))
contig.unpol <- read.table(paste0("~/poster/data/unpolished_cov/T4I/182/182.regions.bed"))
#create master bed for plotting both unfiltered and filtered coverage
bed.concat <- contig.pol
colnames(bed.concat) <- c("chr", "start", "end", "cov")
bed.concat$contig.pol <- contig.pol$V4
bed.concat$contig.unpol <- contig.unpol$V4
#max coverage displayed
#covmax <- max(c182.pol$V4)
covmax <- mean(contig.pol$V4)*2
bed.concat$contig.pol[which(bed.concat$contig.pol > covmax)] <- covmax
bed.concat$contig.unpol[which(bed.concat$contig.unpol > covmax)] <- covmax
#GCinfo
gc_info <- read.table(paste0("~/poster/data/GC/T4I/182.fasta.txt"), header=TRUE)
#generate bed for gc content (gc script extracts gcinfo for 100 base window)
#mean_prop <- list(rep(mean(gc_info[,1]), ((length/1000)+1)))
mean_prop = 0.5
zero = 0
chr <- list(rep(contig, ((length/1000)+1)))
starts <- seq(from = 0, to = (length), by = 1000)
ends <- seq(from = 1000, to = (length), by = 1000)
ends <- append(ends, length)
gc_content <- gc_info[,1]
gc_skew <- gc_info[,2]
gc_skew <- gc_skew / max(gc_skew) # the gc_skew and gc_culm columns need to converted to a proportion (i.e. between 0.0 to 1.0) to be plotted on the same track.
gc_culm <- gc_info[,3]
gc_culm <- gc_culm / max(abs(gc_culm))
gc_bed <- data.frame(chr, starts, ends, gc_content, gc_skew, gc_culm, mean_prop, zero)
colnames(gc_bed) <- c('chr','start','end','gc_content','gc_skew','gc_culm', 'mean_prop', 'zero')
#CDS map
cds<- read.table(paste0("~/poster/data/CDS/T4I/182.gff.txt.txt"), fill=TRUE)
cds.for <- subset(cds, V7 == "+" & V3 == "CDS", select = c(V1,V4,V5,V8))
cds.for$V8 = 1
cds.for[,2] <- as.numeric(as.character(cds.for[,2]))
cds.for[,3] <- as.numeric(as.character(cds.for[,3]))
colnames(cds.for) <- c("chr", "start", "end", "cov")
cds.rev <- subset(cds, V7 == "-" & V3 == "CDS", select = c(V1,V4,V5,V8))
cds.rev$V8 = 1
cds.rev[,2] <- as.numeric(as.character(cds.rev[,2]))
cds.rev[,3] <- as.numeric(as.character(cds.rev[,3]))
colnames(cds.rev) <- c("chr", "start", "end", "cov")
tRNA <- cds.rev <- subset(cds, V3 == "tRNA", select = c(V1,V4,V5,V8))
tRNA$V8 = 1
tRNA[,2] <- as.numeric(as.character(tRNA[,2]))
tRNA[,3] <- as.numeric(as.character(tRNA[,3]))
colnames(tRNA) <- c("chr", "start", "end", "cov")
rRNA <- cds.rev <- subset(cds, V3 == "rRNA", select = c(V1,V4,V5,V8))
rRNA$V8 = 1
rRNA[,2] <- as.numeric(as.character(rRNA[,2]))
rRNA[,3] <- as.numeric(as.character(rRNA[,3]))
colnames(rRNA) <- c("chr", "start", "end", "cov")
#--------------------------------- CIRCOS INITIALIZATION
circos.clear()
circos.par(start.degree=75, gap.after = 30, cell.padding=c(0,0,0,0))
circos.initializeWithIdeogram(cytoband[1,], plotType = "axis")
#COVERAGE
circos.genomicTrack(bed.concat, numeric.column=c("contig.pol", "contig.unpol"), ylim = c(0,covmax), panel.fun = function(region, value, ...) {
circos.genomicLines(region, value, numeric.column="contig.unpol", baseline = 0, col = "#D8D8D8", border = NA, area=TRUE, ...)
circos.genomicLines(region, value, numeric.column="contig.pol", baseline = 0, col = "#2971FF", border = NA, area=TRUE, ...)
},
track.height = 0.15,
bg.border = NA
)
#GCINFO
#GC content on its own track
circos.genomicTrackPlotRegion(gc_bed, numeric.column="gc_content" , ylim = c(min(gc_bed$gc_content),max(gc_bed$gc_content)), panel.fun = function(region, value, ...) {
circos.genomicLines(region, value, numeric.column="gc_content", baseline = 0, col = "#0353A4", border = NA, ...)
circos.genomicLines(region, value, numeric.column="mean_prop", baseline = 0, col = "#B9D6F2", border = NA, ...)
}, bg.border = NA, track.height = 0.1)
# plot GC skew and culmulative skew.
circos.genomicTrackPlotRegion(gc_bed, numeric.column=c("gc_culm", "gc_skew"), ylim = c(-1, 1), panel.fun = function(region, value, ...) {
circos.genomicLines(region, value, numeric.column="gc_culm", baseline = 0, col = "#CCD1D1", border = NA, area=TRUE,...)
circos.genomicLines(region, value, numeric.column="gc_skew", baseline = 0, col = "#005b96", border = NA,...)
circos.genomicLines(region, value, numeric.column="zero", baseline = 0, col = "#B9D6F2", border = NA, ...)
}, bg.border = NA, track.height = 0.1)
#CDS FORWARD
circos.genomicTrack(cds.for, numeric.column = ("cov"), ylim = c(0,1), panel.fun = function(region, value, ...) {
# in every region, print a vertical line at the start region.
for (k in seq_len(nrow(region))){
# plot vertical lines for each START of the ORF from bottom to top.
circos.lines(rep(region[k, 1], 2), c(0, 1), lwd = 0.2, straight = TRUE, col = "#A1C6EA")}
},
track.height = 0.05,
bg.border = NA
)
#CDS BACKWARD
circos.genomicTrack(cds.for, numeric.column = ("cov"), ylim = c(0,1), panel.fun = function(region, value, ...) {
# in every region, print a vertical line at the start region.
for (k in seq_len(nrow(region))){
# plot vertical lines for each START of the ORF from bottom to top.
circos.lines(rep(region[k, 1], 2), c(0, 1), lwd = 0.2, straight = TRUE, col = "#BBD1EA")}
},
track.height = 0.05,
bg.border = NA
)
#tRNA AND rRNA
circos.genomicTrack(list(tRNA, rRNA), ylim = c(0,1), panel.fun = function(region, value, ...) {
# this will iterate through the list of bed dataframes (trna and rrna)
i = getI(...)
# plot tRNAs
if (i == 1){
for (k in seq_len(nrow(region))){
# plot vertical lines for each START of the orf from bottom to top.
circos.lines(rep(region[k, 1], 2), c(0, 1), lwd = 2, straight = TRUE, col = "#DAE3E5")
}
} else {
# plot rRNAs as red
for (k in seq_len(nrow(region))){
# plot vertical lines for each START of the orf from bottom to top.
circos.lines(rep(region[k, 1], 2), c(0, 1), lwd = 2, straight = TRUE, col = "#0353A4")
}
}
},
track.height = 0.05,
bg.border = NA
)
text(0,0, "Accumulibacter", cex=3)
text(0,-0.05, paste0("Sample: ", sample), cex=1.7, pos=1)
text(0, -0.2, paste0("Size: ", length), cex = 1, col = "#000000")
text(0, 0.80, "Nanopore coverage", cex = 1.5, col = "#000000")
text(0, 0.68, "GC content", cex = 1.3, col = "#000000")
text(0, 0.53, "GC skew", cex = 1.3, col = "#000000")
text(0, 0.45, "CDS (+)", cex = 1.3, col = "#000000")
text(0, 0.39, "CDS (-)", cex = 1.3, col = "#000000")
text(0, 0.32, "tRNA (light)\n rRNA (dark)", cex = 1, col = "#000000")
circos.clear()
circos.par(start.degree=75, gap.after = 30, cell.padding=c(0,0,0,0))
circos.initializeWithIdeogram(cytoband[1,], plotType = "axis")
#COVERAGE
circos.genomicTrack(bed.concat, numeric.column=c("contig.pol", "contig.unpol"), ylim = c(0,covmax), panel.fun = function(region, value, ...) {
circos.genomicLines(region, value, numeric.column="contig.unpol", baseline = 0, col = "#D8D8D8", border = NA, area=TRUE, ...)
circos.genomicLines(region, value, numeric.column="contig.pol", baseline = 0, col = "#2971FF", border = NA, area=TRUE, ...)
},
track.height = 0.15,
bg.border = NA
)
#GCINFO
#GC content on its own track
circos.genomicTrackPlotRegion(gc_bed, numeric.column="gc_content" , ylim = c(min(gc_bed$gc_content),max(gc_bed$gc_content)), panel.fun = function(region, value, ...) {
circos.genomicLines(region, value, numeric.column="gc_content", baseline = 0, col = "#0353A4", border = NA, ...)
circos.genomicLines(region, value, numeric.column="mean_prop", baseline = 0, col = "#B9D6F2", border = NA, ...)
}, bg.border = NA, track.height = 0.1)
# plot GC skew and culmulative skew.
circos.genomicTrackPlotRegion(gc_bed, numeric.column=c("gc_culm", "gc_skew"), ylim = c(-1, 1), panel.fun = function(region, value, ...) {
circos.genomicLines(region, value, numeric.column="gc_culm", baseline = 0, col = "#CCD1D1", border = NA, area=TRUE,...)
circos.genomicLines(region, value, numeric.column="gc_skew", baseline = 0, col = "#005b96", border = NA,...)
circos.genomicLines(region, value, numeric.column="zero", baseline = 0, col = "#B9D6F2", border = NA, ...)
}, bg.border = NA, track.height = 0.1)
#CDS FORWARD
circos.genomicTrack(cds.for, numeric.column = ("cov"), ylim = c(0,1), panel.fun = function(region, value, ...) {
# in every region, print a vertical line at the start region.
for (k in seq_len(nrow(region))){
# plot vertical lines for each START of the ORF from bottom to top.
circos.lines(rep(region[k, 1], 2), c(0, 1), lwd = 0.2, straight = TRUE, col = "#A1C6EA")}
},
track.height = 0.05,
bg.border = NA
)
#CDS BACKWARD
circos.genomicTrack(cds.for, numeric.column = ("cov"), ylim = c(0,1), panel.fun = function(region, value, ...) {
# in every region, print a vertical line at the start region.
for (k in seq_len(nrow(region))){
# plot vertical lines for each START of the ORF from bottom to top.
circos.lines(rep(region[k, 1], 2), c(0, 1), lwd = 0.2, straight = TRUE, col = "#BBD1EA")}
},
track.height = 0.05,
bg.border = NA
)
#tRNA AND rRNA
circos.genomicTrack(list(tRNA, rRNA), ylim = c(0,1), panel.fun = function(region, value, ...) {
# this will iterate through the list of bed dataframes (trna and rrna)
i = getI(...)
# plot tRNAs
if (i == 1){
for (k in seq_len(nrow(region))){
# plot vertical lines for each START of the orf from bottom to top.
circos.lines(rep(region[k, 1], 2), c(0, 1), lwd = 2, straight = TRUE, col = "#DAE3E5")
}
} else {
# plot rRNAs as red
for (k in seq_len(nrow(region))){
# plot vertical lines for each START of the orf from bottom to top.
circos.lines(rep(region[k, 1], 2), c(0, 1), lwd = 2, straight = TRUE, col = "#0353A4")
}
}
},
track.height = 0.05,
bg.border = NA
)
text(0,0, "Accumulibacter", cex=3)
text(0,-0.05, paste0("Sample: ", sample), cex=1.7, pos=1)
text(0, -0.2, paste0("Size: ", length), cex = 1, col = "#000000")
text(0, 0.80, "Nanopore coverage", cex = 1.5, col = "#000000")
text(0, 0.68, "GC content", cex = 1.3, col = "#000000")
text(0, 0.53, "GC skew", cex = 1.3, col = "#000000")
text(0, 0.45, "CDS (+)", cex = 1.3, col = "#000000")
text(0, 0.39, "CDS (-)", cex = 1.3, col = "#000000")
text(0, 0.32, "tRNA (light)\n rRNA (dark)", cex = 1, col = "#000000")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
